basePath: /api/v1
definitions:
  dto.CreateUserRequest:
    properties:
      active:
        type: boolean
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        allOf:
        - $ref: '#/definitions/models.UserRole'
        enum:
        - admin
        - caixa
        - garcom
    required:
    - email
    - name
    - password
    - role
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.UserResponse:
    properties:
      active:
        type: boolean
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
    type: object
  models.UserRole:
    enum:
    - admin
    - caixa
    - garcom
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleCaixa
    - RoleGarcom
host: localhost:8080
info:
  contact:
    email: support@fornogestor.com
    name: API Support
  description: API para gestão de pizzarias
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: FornoGestor API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Autentica um usuário e retorna tokens JWT.
      parameters:
      - description: Credenciais de login
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Realiza login
      tags:
      - Autenticação
  /users:
    post:
      consumes:
      - application/json
      description: Cria um novo usuário com os dados fornecidos.
      parameters:
      - description: Dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cria um novo usuário
      tags:
      - Usuários
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
